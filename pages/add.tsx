import { yupResolver } from "@hookform/resolvers/yup";
import type { NextPage } from "next";
import Head from "next/head";
import { SubmitHandler, useForm } from "react-hook-form";
import { useMutation } from "react-query";
import { ClipLoader } from "react-spinners";
import * as yup from "yup";

import type { EmployeeType } from "../@types";
import { createEmployee } from "../services";

const phoneRegExp =
  /^((\\+[1-9]{1,4}[ \\-]*)|(\\([0-9]{2,3}\\)[ \\-]*)|([0-9]{2,4})[ \\-]*)*?[0-9]{3,4}?[ \\-]*[0-9]{3,4}?$/;

const employeeSchema = yup.object().shape({
  firstName: yup.string().required(),
  lastName: yup.string().required(),
  email: yup.string().email().required(),
  pesel: yup
    .number()
    .test(
      "len",
      "Pesel number must be exactly 11 characters",
      (val) => val?.toString()?.length === 11,
    ),
  zipCode: yup.string().required(),
  city: yup.string().required(),
  phone: yup.string().matches(phoneRegExp, "Phone number is not valid").required(),
});

const Add: NextPage = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<EmployeeType>({
    resolver: yupResolver(employeeSchema),
  });
  const { mutate, isLoading, isError } = useMutation(createEmployee);

  console.log("err", errors);

  const onSubmit: SubmitHandler<EmployeeType> = (data) => {
    try {
      mutate(data);
      console.log(data);
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>Add new employee</h1>

      <form onSubmit={handleSubmit(onSubmit)}>
        <input type="text" {...register("firstName")} placeholder="first name" />
        <input type="text" {...register("lastName")} placeholder="last name" />
        <input type="email" {...register("email")} placeholder="email" />
        <input type="text" {...register("pesel")} placeholder="pesel number" />
        <input type="text" {...register("zipCode")} placeholder="ZIP code" />
        <input type="text" {...register("city")} placeholder="city" />
        <input type="text" {...register("phone")} placeholder="phone number" />
        <button type="submit">Add</button>
      </form>

      <ClipLoader loading={isLoading} />
      {isError ? <span>Error</span> : null}
    </>
  );
};

export default Add;
